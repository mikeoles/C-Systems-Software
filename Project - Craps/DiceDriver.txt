include <linux/fs.h>
#include <linux/init.h>
#include <linux/miscdevice.h>
#include <linux/module.h>
#include <asm/uaccess.h>
#include <linux/random.h>

unsigned char get_random_byte(int max) {
        unsigned char c;
        get_random_bytes(&c, 1);
        return c%max+1;
}

static ssize_t dice_read(struct file * file, char * buf,
                          size_t count, loff_t *ppos)
{
        char rand = 0;
        int len = 1;
        rand = get_random_byte(6);
        copy_to_user(buf, &rand, len);
        return 1;
}

static const struct file_operations dice_fops = {
        .owner          = THIS_MODULE,
        .read           = dice_read,
};

static struct miscdevice dice_driver = {
        MISC_DYNAMIC_MINOR,
        "dice",
        &dice_fops
};

static int __init
dice_init(void)
{
       int ret;
        ret = misc_register(&dice_driver);
        if (ret)
                printk(KERN_ERR
                       "Unable to register \"Dice Driver!\" misc device\n");
        return ret;
}

module_init(dice_init);

static void __exit
dice_exit(void)
{
        misc_deregister(&dice_driver);
}

module_exit(dice_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Valerie Henson <val@nmt.edu>");
MODULE_DESCRIPTION("Dice Driver");
MODULE_VERSION("dev");